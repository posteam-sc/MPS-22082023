//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MBMS.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class MBMSEntities : DbContext
    {
        public MBMSEntities()
            : base("name=MBMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AdvanceMoneyCustomer> AdvanceMoneyCustomers { get; set; }
        public DbSet<BillCode7Layer> BillCode7Layer { get; set; }
        public DbSet<BillCode7LayerDetail> BillCode7LayerDetail { get; set; }
        public DbSet<BillDay> BillDays { get; set; }
        public DbSet<CompanyProfile> CompanyProfiles { get; set; }
        public DbSet<Ledger> Ledgers { get; set; }
        public DbSet<LogData> LogDatas { get; set; }
        public DbSet<Meter> Meters { get; set; }
        public DbSet<MeterBox> MeterBoxes { get; set; }
        public DbSet<MeterHistory> MeterHistories { get; set; }
        public DbSet<MeterLossesMultiplierChangeHistory> MeterLossesMultiplierChangeHistories { get; set; }
        public DbSet<MeterType> MeterTypes { get; set; }
        public DbSet<Pole> Poles { get; set; }
        public DbSet<PunishmentCustomer> PunishmentCustomers { get; set; }
        public DbSet<PunishmentRule> PunishmentRules { get; set; }
        public DbSet<Quarter> Quarters { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<RoleManagement> RoleManagements { get; set; }
        public DbSet<Setting> Settings { get; set; }
        public DbSet<StreetLightFee> StreetLightFees { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<Township> Townships { get; set; }
        public DbSet<Transformer> Transformers { get; set; }
        public DbSet<TransformerHistory> TransformerHistories { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserInRole> UserInRoles { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<MeterBill> MeterBills { get; set; }
        public DbSet<ManualMeterUnitCollect> ManualMeterUnitCollects { get; set; }
        public DbSet<MeterUnitCollect> MeterUnitCollects { get; set; }
    
        public virtual int BillCode7LayerDetail_DeleteByBillCode7LayerID(string billCode7LayerID)
        {
            var billCode7LayerIDParameter = billCode7LayerID != null ?
                new ObjectParameter("billCode7LayerID", billCode7LayerID) :
                new ObjectParameter("billCode7LayerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BillCode7LayerDetail_DeleteByBillCode7LayerID", billCode7LayerIDParameter);
        }
    
        public virtual ObjectResult<BillCodeSummaryPro_Result> BillCodeSummaryPro(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BillCodeSummaryPro_Result>("BillCodeSummaryPro", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<LedgerSummaryList_Result> LedgerSummaryList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, Nullable<int> bookCode, Nullable<int> lineNo, Nullable<int> pageNo)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var bookCodeParameter = bookCode.HasValue ?
                new ObjectParameter("bookCode", bookCode) :
                new ObjectParameter("bookCode", typeof(int));
    
            var lineNoParameter = lineNo.HasValue ?
                new ObjectParameter("lineNo", lineNo) :
                new ObjectParameter("lineNo", typeof(int));
    
            var pageNoParameter = pageNo.HasValue ?
                new ObjectParameter("pageNo", pageNo) :
                new ObjectParameter("pageNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LedgerSummaryList_Result>("LedgerSummaryList", fromDateParameter, todateParameter, bookCodeParameter, lineNoParameter, pageNoParameter);
        }
    
        public virtual int MeterBill_DeleteByFromDateToDate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MeterBill_DeleteByFromDateToDate", fromDateParameter, toDateParameter);
        }
    
        public virtual int MeterUnitCollect_DeleteByCustomerIDFromDateToDate(string customerID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MeterUnitCollect_DeleteByCustomerIDFromDateToDate", customerIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int RoleManagement_DeleteByRoleID(string roleID)
        {
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RoleManagement_DeleteByRoleID", roleIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int ManualMeterUnit_DeleteByCustomerIDFromDateToDate(string customerID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManualMeterUnit_DeleteByCustomerIDFromDateToDate", customerIDParameter, fromDateParameter, toDateParameter);
        }
    }
}
